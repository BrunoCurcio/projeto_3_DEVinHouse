package entities;

public abstract class Enemy extends Character implements Dice{
	
	private Weapons weapon;

	public Enemy(int healthPoints, int atkPoints, int defPoints, Weapons weapon) {
		super(healthPoints, atkPoints, defPoints);
		this.weapon = weapon;
	}
	
	 public Weapons getWeapon() {
		return this.weapon;
	}

	 public void setWeapon(Weapons weapon) {
	    this.weapon = weapon;
	 }
	
	@Override
	public void rollToAttack(Character defender, String difficultyLevel) {
		int diceResult = this.D20();
		int damageTaken;
		
		if (diceResult == 1) {
			System.out.println("O inimigo errou o ataque! Você não sofreu dano.");
		} else {
			int deliveredAtk = this.getAtkPoints() + diceResult + this.weapon.getAtkPower();
			
			if (difficultyLevel == "Easy") {
				double atkDescontado = deliveredAtk * 0.2;
				deliveredAtk = (int) (deliveredAtk - atkDescontado);
				
				System.out.println("dado do iniumigo: " + diceResult);
				System.out.println("atk do inimigo: " + this.getAtkPoints());
				System.out.println("atk da arma: " + this.weapon.getAtkPower());
				System.out.println("atk real: " + deliveredAtk);
				System.out.println("atk descontado: " + deliveredAtk * 0.2);
				System.out.println("atk descontado: " + atkDescontado);
			}
			
			if (diceResult == 20) {
				damageTaken = defender.takeDamage(deliveredAtk, true);
				System.out.print("O inimigo acertou um ataque crítico! ");
			} else {
				damageTaken = defender.takeDamage(deliveredAtk, false);
				System.out.print("O inimigo atacou! ");
			}
			
			if (damageTaken < 1) {
				System.out.println("Você bloqueou o ataque do inimigo e não sofreu nenhum dano!");
			} else {
				System.out.printf("Você sofreu %d de dano e agora possui %d pontos de vida.%n", damageTaken, defender.getHealthPoints());				
			}
		}
	}

}

